#!/usr/bin/env python3
"""
War Thunder Statistics Telegram Bot
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –Ω–∞ Render backend API
"""

import os
import asyncio
import logging
from typing import Optional, Dict, Any
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BACKEND_URL = os.getenv('BACKEND_URL', 'https://warstats-backend-f6hw.onrender.com')
DEFAULT_REGION = 'en'

class WarThunderBot:
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.session = httpx.AsyncClient(timeout=30.0)
    
    async def get_player_stats(self, username: str, region: str = DEFAULT_REGION) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å backend API"""
        try:
            url = f"{self.backend_url}/player/{username}"
            params = {'region': region}
            
            logger.info(f"Requesting stats for player: {username} in region: {region}")
            response = await self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            logger.info(f"Successfully received data for {username}")
            return data
            
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error for {username}: {e.response.status_code}")
            return None
        except Exception as e:
            logger.error(f"Error getting stats for {username}: {e}")
            return None
    
    async def format_player_stats(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è Telegram"""
        if not data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞"
        
        username = data.get('username', 'Unknown')
        general = data.get('general', {})
        vehicles = data.get('vehicles', {})
        profile = data.get('profile', {})
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        level = general.get('level', 0)
        total_battles = general.get('total_battles', 0)
        wins = general.get('wins', 0)
        losses = general.get('losses', 0)
        win_rate = general.get('win_rate', 0.0)
        kills = general.get('kills', 0)
        deaths = general.get('deaths', 0)
        kdr = general.get('kdr', 0.0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –±–æ–µ–≤
        ground_battles = general.get('ground_battles', 0)
        air_battles = general.get('air_battles', 0)
        naval_battles = general.get('naval_battles', 0)
        
        # –¢–æ–ø —Ç–µ—Ö–Ω–∏–∫–∞
        top_vehicle = vehicles.get('top_vehicle', {})
        top_vehicle_name = top_vehicle.get('name', 'N/A')
        top_vehicle_battles = top_vehicle.get('battles', 0)
        
        # –ü—Ä–æ—Ñ–∏–ª—å
        clan = profile.get('clan', '–ù–µ—Ç –∫–ª–∞–Ω–∞')
        last_online = profile.get('last_online', 'N/A')
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        source = data.get('__source__', 'unknown')
        source_emoji = "üü¢" if source != "demo_data" else "üü°"
        
        message = f"""
{source_emoji} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞: {username}**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}
‚Ä¢ –í—Å–µ–≥–æ –±–æ–µ–≤: {total_battles:,}
‚Ä¢ –ü–æ–±–µ–¥—ã: {wins:,} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses:,}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1%}
‚Ä¢ –£–±–∏–π—Å—Ç–≤–∞: {kills:,} | –°–º–µ—Ä—Ç–∏: {deaths:,}
‚Ä¢ K/D: {kdr:.2f}

üéØ **–ü–æ —Ç–∏–ø–∞–º –±–æ–µ–≤:**
‚Ä¢ –ù–∞–∑–µ–º–Ω—ã–µ: {ground_battles:,}
‚Ä¢ –í–æ–∑–¥—É—à–Ω—ã–µ: {air_battles:,}
‚Ä¢ –ú–æ—Ä—Å–∫–∏–µ: {naval_battles:,}

üöó **–¢–æ–ø —Ç–µ—Ö–Ω–∏–∫–∞:** {top_vehicle_name} ({top_vehicle_battles} –±–æ–µ–≤)

üë• **–ö–ª–∞–Ω:** {clan}
üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω:** {last_online}

üì° **–ò—Å—Ç–æ—á–Ω–∏–∫:** {source}
"""
        return message.strip()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üéÆ **War Thunder Statistics Bot**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ War Thunder.

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/stats <–∏–º—è_–∏–≥—Ä–æ–∫–∞>` - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
‚Ä¢ `/compare <–∏–≥—Ä–æ–∫1> <–∏–≥—Ä–æ–∫2>` - –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ `/top` - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ `/help` - –ü–æ–º–æ—â—å

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/stats PhlyDaily`
‚Ä¢ `/compare PhlyDaily TheRussianBadger`
‚Ä¢ `/stats PlayerName ru` (–¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)

**–†–µ–≥–∏–æ–Ω—ã:** en, ru, de, fr
"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="get_stats")],
            [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
            [InlineKeyboardButton("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data="compare_players")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!\n"
                "–ü—Ä–∏–º–µ—Ä: `/stats PhlyDaily` –∏–ª–∏ `/stats PlayerName ru`",
                parse_mode='Markdown'
            )
            return
        
        username = context.args[0].strip()
        region = context.args[1] if len(context.args) > 1 else DEFAULT_REGION
        
        if not username:
            await update.message.reply_text("‚ùå –ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text(f"üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {username}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await self.get_player_stats(username, region)
            
            if data:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_message = await self.format_player_stats(data)
                await loading_msg.edit_text(stats_message, parse_mode='Markdown')
            else:
                await loading_msg.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {username}\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                
        except Exception as e:
            logger.error(f"Error in stats command: {e}")
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {username}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def compare_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /compare"""
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!\n"
                "–ü—Ä–∏–º–µ—Ä: `/compare Player1 Player2`",
                parse_mode='Markdown'
            )
            return
        
        player1 = context.args[0].strip()
        player2 = context.args[1].strip()
        region = context.args[2] if len(context.args) > 2 else DEFAULT_REGION
        
        if not player1 or not player2:
            await update.message.reply_text("‚ùå –ò–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é {player1} –∏ {player2}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            data1 = await self.get_player_stats(player1, region)
            data2 = await self.get_player_stats(player2, region)
            
            if data1 and data2:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                comparison = await self.format_comparison(data1, data2)
                await loading_msg.edit_text(comparison, parse_mode='Markdown')
            else:
                await loading_msg.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤."
                )
                
        except Exception as e:
            logger.error(f"Error in compare command: {e}")
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def format_comparison(self, data1: Dict[str, Any], data2: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        p1_name = data1.get('username', 'Player1')
        p2_name = data2.get('username', 'Player2')
        
        p1_general = data1.get('general', {})
        p2_general = data2.get('general', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        p1_level = p1_general.get('level', 0)
        p2_level = p2_general.get('level', 0)
        
        p1_winrate = p1_general.get('win_rate', 0.0)
        p2_winrate = p2_general.get('win_rate', 0.0)
        
        p1_kdr = p1_general.get('kdr', 0.0)
        p2_kdr = p2_general.get('kdr', 0.0)
        
        p1_battles = p1_general.get('total_battles', 0)
        p2_battles = p2_general.get('total_battles', 0)
        
        p1_kills = p1_general.get('kills', 0)
        p2_kills = p2_general.get('kills', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        level_winner = "üü¢" if p1_level > p2_level else "üî¥" if p1_level < p2_level else "üü°"
        winrate_winner = "üü¢" if p1_winrate > p2_winrate else "üî¥" if p1_winrate < p2_winrate else "üü°"
        kdr_winner = "üü¢" if p1_kdr > p2_kdr else "üî¥" if p1_kdr < p2_kdr else "üü°"
        battles_winner = "üü¢" if p1_battles > p2_battles else "üî¥" if p1_battles < p2_battles else "üü°"
        kills_winner = "üü¢" if p1_kills > p2_kills else "üî¥" if p1_kills < p2_kills else "üü°"
        
        comparison = f"""
‚öîÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤**

üë§ **{p1_name}** vs üë§ **{p2_name}**

üìä **–£—Ä–æ–≤–µ–Ω—å:** {level_winner} {p1_level} vs {p2_level}
üèÜ **–í–∏–Ω—Ä–µ–π—Ç:** {winrate_winner} {p1_winrate:.1%} vs {p2_winrate:.1%}
üéØ **K/D:** {kdr_winner} {p1_kdr:.2f} vs {p2_kdr:.2f}
‚öîÔ∏è **–ë–æ–∏:** {battles_winner} {p1_battles:,} vs {p2_battles:,}
üíÄ **–£–±–∏–π—Å—Ç–≤–∞:** {kills_winner} {p1_kills:,} vs {p2_kills:,}

üü¢ = –õ—É—á—à–µ | üî¥ = –•—É–∂–µ | üü° = –†–∞–≤–Ω–æ
"""
        return comparison.strip()
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /top"""
        region = context.args[0] if context.args else DEFAULT_REGION
        limit = min(int(context.args[1]) if len(context.args) > 1 else 10, 50)
        
        loading_msg = await update.message.reply_text(f"üèÜ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø {limit} –∏–≥—Ä–æ–∫–æ–≤...")
        
        try:
            url = f"{self.backend_url}/top"
            params = {'region': region, 'limit': limit}
            
            response = await self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data and isinstance(data, list):
                top_message = f"üèÜ **–¢–æ–ø {len(data)} –∏–≥—Ä–æ–∫–æ–≤** (—Ä–µ–≥–∏–æ–Ω: {region})\n\n"
                
                for i, player in enumerate(data[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 10
                    username = player.get('username', 'Unknown')
                    level = player.get('level', 0)
                    winrate = player.get('win_rate', 0.0)
                    kdr = player.get('kdr', 0.0)
                    
                    top_message += f"{i}. **{username}**\n"
                    top_message += f"   –£—Ä–æ–≤–µ–Ω—å: {level} | –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1%} | K/D: {kdr:.2f}\n\n"
                
                await loading_msg.edit_text(top_message, parse_mode='Markdown')
            else:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"Error in top command: {e}")
            await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

üìä **–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:**
`/stats <–∏–º—è_–∏–≥—Ä–æ–∫–∞> [—Ä–µ–≥–∏–æ–Ω]`
–ü—Ä–∏–º–µ—Ä: `/stats PhlyDaily` –∏–ª–∏ `/stats PlayerName ru`

‚öîÔ∏è **–°—Ä–∞–≤–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:**
`/compare <–∏–≥—Ä–æ–∫1> <–∏–≥—Ä–æ–∫2> [—Ä–µ–≥–∏–æ–Ω]`
–ü—Ä–∏–º–µ—Ä: `/compare Player1 Player2`

üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:**
`/top [—Ä–µ–≥–∏–æ–Ω] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`
–ü—Ä–∏–º–µ—Ä: `/top en 20`

üåç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:**
‚Ä¢ `en` - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ `ru` - –†—É—Å—Å–∫–∏–π
‚Ä¢ `de` - –ù–µ–º–µ—Ü–∫–∏–π
‚Ä¢ `fr` - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π

üì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ üü¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ WT
‚Ä¢ üü° –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
"""
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "get_stats":
            await query.edit_message_text(
                "üìä **–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/stats <–∏–º—è_–∏–≥—Ä–æ–∫–∞>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/stats PhlyDaily`",
                parse_mode='Markdown'
            )
        elif query.data == "top_players":
            await query.edit_message_text(
                "üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/top [—Ä–µ–≥–∏–æ–Ω] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/top en 20`",
                parse_mode='Markdown'
            )
        elif query.data == "compare_players":
            await query.edit_message_text(
                "‚öîÔ∏è **–°—Ä–∞–≤–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/compare <–∏–≥—Ä–æ–∫1> <–∏–≥—Ä–æ–∫2>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/compare Player1 Player2`",
                parse_mode='Markdown'
            )
        elif query.data == "help":
            await self.help_command(update, context)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    bot = WarThunderBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("compare", bot.compare_command))
    application.add_handler(CommandHandler("top", bot.top_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting War Thunder Statistics Bot...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main()) 