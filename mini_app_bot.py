#!/usr/bin/env python3
"""
GameStats Telegram Bot
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import logging
import os
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(s)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'your-bot-token-here')
BACKEND_URL = os.getenv('BACKEND_URL', 'https://gamestats-backend.onrender.com')
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://gamestats-mini-app.netlify.app')

class GameStatsBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("find", self.find_command))
        self.application.add_handler(CommandHandler("top", self.top_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.effective_user or not update.message:
            return
            
        user = update.effective_user
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **GameStats**!

–í–∞—à–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

üöÄ **–ß—Ç–æ —É–º–µ–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–≤–∏–∞—Ü–∏—è, —Ç–∞–Ω–∫–∏, —Ñ–ª–æ—Ç)
‚Ä¢ üèÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã
‚Ä¢ üåô –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "üéÆ –û—Ç–∫—Ä—ã—Ç—å GameStats", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.message:
            return
            
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üéÆ `/start` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üîç `/find <–Ω–∏–∫–Ω–µ–π–º>` - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
üìä `/stats` - –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üèÜ `/top` - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
‚öôÔ∏è `/settings` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–º–Ω–∞—è –∏ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
‚Ä¢ –ú–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏

üÜò **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/admin")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if not update.message:
            return
            
        stats_text = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GameStats**

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:

üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞** - –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤** - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏
üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=search")
            )],
            [InlineKeyboardButton(
                "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=top")
            )],
            [InlineKeyboardButton(
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=stats")
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def find_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /find"""
        if not update.message:
            return
            
        if not context.args:
            await update.message.reply_text(
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/find <–Ω–∏–∫–Ω–µ–π–º>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/find JohnDoe`",
                parse_mode='Markdown'
            )
            return
        
        player_name = " ".join(context.args)
        api_url = f"http://localhost:8080/profile?username={player_name}&region=en"
        try:
            async with httpx.AsyncClient() as client:
                resp = await client.get(api_url, timeout=30)
                data = resp.json()
            msg = f"\n".join([
                f"üë§ –ò–≥—Ä–æ–∫: {data.get('username')}",
                f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {data.get('level') if data.get('level') is not None else 'N/A'}",
                # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –∂–µ–ª–∞–Ω–∏—é
            ])
            await update.message.reply_text(msg)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /top"""
        if not update.message:
            return
            
        top_text = """
üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ GameStats**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

üëë **–¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º** - –ª—É—á—à–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥
üéØ **–¢–æ–ø –ø–æ K/D** - –ª—É—á—à–∏–µ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —É–±–∏–π—Å—Ç–≤/—Å–º–µ—Ä—Ç–µ–π
‚è±Ô∏è **–¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏** - —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "üëë –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=top&category=wins")
            )],
            [InlineKeyboardButton(
                "üéØ –¢–æ–ø –ø–æ K/D", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=top&category=kd")
            )],
            [InlineKeyboardButton(
                "‚è±Ô∏è –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=top&category=time")
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            top_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        if not update.message:
            return
            
        settings_text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:

üåô **–¢–µ–º–∞** - —Å–≤–µ—Ç–ª–∞—è –∏–ª–∏ —Ç–µ–º–Ω–∞—è
üåç **–Ø–∑—ã–∫** - —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
üìä **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ** - —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        
        keyboard = [
            [InlineKeyboardButton(
                "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=settings")
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        if not update.callback_query:
            return
            
        query = update.callback_query
        await query.answer()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if query.data == "open_app":
            await query.edit_message_text(
                "üéÆ –û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...\n\n"
                "–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                        web_app=WebAppInfo(url=MINI_APP_URL)
                    )
                ]])
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
            
        text = update.message.text
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫
        if text and len(text) >= 3 and len(text) <= 20 and text.replace('_', '').replace('-', '').isalnum():
            keyboard = [
                [InlineKeyboardButton(
                    f"üîç –ù–∞–π—Ç–∏ {text}", 
                    web_app=WebAppInfo(url=f"{MINI_APP_URL}?action=search&player={text}")
                )]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞: **{text}**\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton(
                    "üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üí¨ –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:",
                reply_markup=reply_markup
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("Starting GameStats bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = GameStatsBot()
    bot.run()

if __name__ == "__main__":
    main() 